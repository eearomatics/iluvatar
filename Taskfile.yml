version: '3'

tasks:
  ### BEGIN SECTION: Terraform shared utility tasks
  tf:init:
    desc: Common tf initialization task.
    preconditions: &necessary-tf-envs
      - sh: 'test -n "$TF_VAR_r2_api_token"'
        msg: "Missing TF_VAR_r2_api_token in your environment"
      - sh: 'test -n "$AWS_REGION"'
        msg: "Missing AWS_REGION in your environment"
      - sh: 'test -n "$AWS_ACCESS_KEY_ID"'
        msg: "Missing AWS_ACCESS_KEY_ID in your environment"
      - sh: 'test -n "$AWS_SECRET_ACCESS_KEY"'
        msg: "Missing AWS_SECRET_ACCESS_KEY in your environment"
      - sh: 'test -n "$AWS_ENDPOINT_URL_S3"'
        msg: "Missing AWS_ENDPOINT_URL_S3 in your environment"
    requires: &necessary-tf-vars
      vars: [TF_PROJECT_DIR]
    dir: '{{.TF_PROJECT_DIR}}'
    cmds:
      - tofu init -backend-config={{.ROOT_DIR}}/infrastructure/backends/cloudflare-r2.conf {{.CLI_ARGS}}
  tf:clean:
    desc: Common tf project cleaning task.
    dir: '{{.TF_PROJECT_DIR}}'
    preconditions: *necessary-tf-envs
    requires: *necessary-tf-vars
    cmds:
      - rm -rf ./.terraform .terraform.lock.hcl
  tf:run:
    desc: Common tf project runner task.
    dir: '{{.TF_PROJECT_DIR}}'
    preconditions: *necessary-tf-envs
    requires: *necessary-tf-vars
    cmds:
      - tofu {{.CLI_ARGS}}
  tf:*:
    desc: Common tf project runner task.
    dir: '{{.TF_PROJECT_DIR}}'
    preconditions: *necessary-tf-envs
    requires: *necessary-tf-vars
    vars: &subcommand-passthrough-vars
      SUBCOMMAND: '{{index .MATCH 0}}'
    cmds:
      - tofu {{.SUBCOMMAND}} {{.CLI_ARGS}}
  ### END SECTION: Terraform shared utility tasks

  ### BEGIN SECTION: Wrangler shared utility tasks
  wrangler:login:
    desc: Log in to the Wrangler CLI
    cmds:
      - npx wrangler login
  wrangler:*:
    desc: Deploy a Wrangler worker project
    preconditions: &necessary-wrangler-envs
      - sh: 'npx wrangler whoami'
        msg: "Wrangler MUST be logged in!"
    vars: *subcommand-passthrough-vars
    requires: &necessary-wrangler-vars
      vars: [WRANGLER_PROJECT_DIR]
    dir: '{{.WRANGLER_PROJECT_DIR}}'
    cmds:
      - npx wrangler {{.SUBCOMMAND}} {{.CLI_ARGS}}
  ### END SECTION: Wrangler shared utility tasks

  ### BEGIN SECTION: Terraform modules for eearomatics.com
  ee:init:
    desc: Initialize the eearomatics.com Terraform module
    cmds:
      - task: tf:init
        vars:
          TF_PROJECT_DIR: infrastructure/eearomatics
  ee:clean:
    desc: Clean the eearomatics.com Terraform module
    cmds:
      - task: tf:clean
        vars:
          TF_PROJECT_DIR: infrastructure/eearomatics
  ee:*:
    desc: Run a command in the eearomatics.com Terraform module
    vars: *subcommand-passthrough-vars
    cmds:
      - task: tf:{{.SUBCOMMAND}}
        vars:
          TF_PROJECT_DIR: infrastructure/eearomatics
  ### END SECTION: Terraform modules for eearomatics.com

  ### BEGIN SECTION: Terraform modules for torinreine.com
  tr:init:
    desc: Initialize the torinreine.com Terraform module
    cmds:
      - task: tf:init
        vars:
          TF_PROJECT_DIR: infrastructure/torinreine
  tr:clean:
    desc: Clean the torinreine.com Terraform module
    cmds:
      - task: tf:clean
        vars:
          TF_PROJECT_DIR: infrastructure/torinreine
  tr:*:
    desc: Run a command in the torinreine.com Terraform module
    vars: *subcommand-passthrough-vars
    cmds:
      - task: tf:{{.SUBCOMMAND}}
        vars:
          TF_PROJECT_DIR: infrastructure/torinreine
  ### END SECTION: Terraform modules for torinreine.com

  ### BEGIN SECTION: Container-registry workers and Terraform module
  registry:worker:deploy:
    desc: "Deploy the container-registry worker"
    cmds:
      - task: wrangler:deploy
        vars:
          WRANGLER_PROJECT_DIR: workers/container-registry
          CLI_ARGS: --env production
  registry:tf:init:
    desc: Initialize the container-registry Terraform module
    cmds:
      - task: tf:init
        vars:
          TF_PROJECT_DIR: workers/container-registry/iac
  registry:tf:clean:
    desc: Clean the container-registry Terraform module
    cmds:
      - task: tf:clean
        vars:
          TF_PROJECT_DIR: workers/container-registry/iac
  registry:tf:*:
    desc: Run a command in the container-registry Terraform module
    vars: *subcommand-passthrough-vars
    cmds:
      - task: tf:{{.SUBCOMMAND}}
        vars:
          TF_PROJECT_DIR: workers/container-registry/iac
  ### END SECTION: Container-registry workers and Terraform module

  ### BEGIN SECTION: Shared cloud resources Terraform module
  cloud:init:
    desc: Initialize the cloud Terraform module
    cmds:
      - task: tf:init
        vars:
          TF_PROJECT_DIR: infrastructure/cloud
  cloud:clean:
    desc: Clean the cloud Terraform module
    cmds:
      - task: tf:clean
        vars:
          TF_PROJECT_DIR: infrastructure/cloud
  cloud:*:
    desc: Run a command in the cloud Terraform module
    vars: *subcommand-passthrough-vars
    cmds:
      - task: tf:{{.SUBCOMMAND}}
        vars:
          TF_PROJECT_DIR: infrastructure/cloud
  ### END SECTION: Shared cloud resources Terraform module

  ### BEGIN SECTION: Infisical Terraform module
  infisical:init:
    desc: Initialize the infisical Terraform module
    cmds:
      - task: tf:init
        vars:
          TF_PROJECT_DIR: infrastructure/infisical
  infisical:clean:
    desc: Clean the infisical Terraform module
    cmds:
      - task: tf:clean
        vars:
          TF_PROJECT_DIR: infrastructure/infisical
  infisical:*:
    desc: Run a command in the infisical Terraform module
    vars: *subcommand-passthrough-vars
    cmds:
      - task: tf:{{.SUBCOMMAND}}
        vars:
          TF_PROJECT_DIR: infrastructure/infisical
  ### END SECTION: Infisical Terraform module

  ### BEGIN SECTION: create-cloudflare utilities
  cf:create:
    desc: Run the create-cloudflare CLI
    cmds:
      - yarn install --frozen-lockfile
      - "{{.ROOT_DIR}}/node_modules/.bin/create-cloudflare {{.CLI_ARGS}}"
  ### END SECTION: create-cloudflare utilities